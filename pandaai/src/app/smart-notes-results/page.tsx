"use client";
import React, { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';



export default function SmartNotesResultsPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [transcription, setTranscription] = useState('');
  const [selectedOutputType, setSelectedOutputType] = useState('smart_notes');
  const [generatedNotes, setGeneratedNotes] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    // R√©cup√©rer la transcription depuis les param√®tres d'URL
    const transcriptionParam = searchParams.get('transcription');
    console.log('Transcription param:', transcriptionParam);
    if (transcriptionParam) {
      const decodedTranscription = decodeURIComponent(transcriptionParam);
      console.log('Decoded transcription:', decodedTranscription);
      setTranscription(decodedTranscription);
    } else {
      console.log('No transcription parameter found');
    }
  }, [searchParams]);

  const generateNotes = async () => {
    if (!transcription.trim()) {
      setError('No transcription available');
      return;
    }

    console.log('Generating notes with:', { selectedOutputType, transcriptionLength: transcription.length });
    setIsProcessing(true);
    setError('');

    try {
      const requestBody = {
        content: transcription,
        outputType: selectedOutputType
      };
      console.log('Sending request to smart-notes API:', requestBody);
      
      const response = await fetch('/api/smart-notes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      console.log('Smart notes API response status:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Smart notes API error:', errorData);
        throw new Error(errorData.error || 'Failed to generate notes');
      }

      const data = await response.json();
      console.log('Smart notes API success:', data);
      setGeneratedNotes(data.content);
    } catch (err) {
      console.error('Generate notes error:', err);
      setError(err instanceof Error ? err.message : 'Failed to generate notes');
    } finally {
      setIsProcessing(false);
    }
  };

  const downloadPDF = async () => {
    if (!generatedNotes) return;
    
    try {
      // Cr√©er un √©l√©ment temporaire pour le contenu
      const tempDiv = document.createElement('div');
      tempDiv.style.position = 'absolute';
      tempDiv.style.left = '-9999px';
      tempDiv.style.top = '0';
      tempDiv.style.width = '800px';
      tempDiv.style.padding = '40px';
      tempDiv.style.backgroundColor = 'white';
      tempDiv.style.fontFamily = 'Arial, sans-serif';
      tempDiv.style.fontSize = '14px';
      tempDiv.style.lineHeight = '1.6';
      tempDiv.style.color = '#333';
      
      // Ajouter le contenu
      tempDiv.innerHTML = `
        <h1 style="color: #8B3FFC; font-size: 24px; margin-bottom: 20px; text-align: center;">Smart Notes</h1>
        <div style="white-space: pre-wrap; margin-bottom: 20px;">${generatedNotes}</div>
        <div style="text-align: center; color: #666; font-size: 12px; margin-top: 40px;">
          Generated by PandaAI Smart Notes
        </div>
      `;
      
      document.body.appendChild(tempDiv);
      
      // Utiliser html2canvas pour capturer
      const canvas = await import('html2canvas').then(module => module.default(tempDiv, {
        width: 800,
        height: tempDiv.scrollHeight,
        scale: 2,
        backgroundColor: '#ffffff'
      }));
      
      // Cr√©er le PDF avec fallback
      try {
        const jsPDF = (await import('jspdf')).default;
        const pdf = new jsPDF('p', 'mm', 'a4');
        
        const imgData = canvas.toDataURL('image/png');
        const imgWidth = 210;
        const pageHeight = 295;
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        let heightLeft = imgHeight;
        
        let position = 0;
        
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
        
        while (heightLeft >= 0) {
          position = heightLeft - imgHeight;
          pdf.addPage();
          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
          heightLeft -= pageHeight;
        }
        
        pdf.save('smart-notes.pdf');
      } catch (pdfError) {
        console.error('PDF generation failed, using text fallback:', pdfError);
        // Fallback vers t√©l√©chargement texte
        const blob = new Blob([generatedNotes], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'smart-notes.txt';
        a.click();
        URL.revokeObjectURL(url);
      }
      
      // Nettoyer
      document.body.removeChild(tempDiv);
    } catch (error) {
      console.error('PDF generation error:', error);
      // Fallback vers t√©l√©chargement texte
      const blob = new Blob([generatedNotes], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'smart-notes.txt';
      a.click();
      URL.revokeObjectURL(url);
    }
  };

  return (
    <div className="min-h-screen bg-[#F7FAFC] flex flex-col items-center py-12 px-4">
      {/* Titre */}
      <h1 className="text-4xl md:text-5xl font-bold text-center text-gray-900 mb-8">Smart note results</h1>
      
      {/* Bouton retour */}
      <button
        onClick={() => router.push('/smart-notes')}
        className="mb-8 bg-[#F7DC6F] hover:translate-y-1 hover:shadow-sm active:translate-y-1 active:shadow-sm text-white font-bold rounded-xl px-6 py-3 shadow-lg border-2 border-[#F7DC6F] transition cursor-pointer"
        style={{boxShadow: '0 4px 0 #E6C95A'}}
      >
        ‚Üê Back to Smart Notes
      </button>

      <div className="w-full max-w-4xl space-y-8">
        {/* Transcription */}
        <div className="bg-white rounded-2xl shadow p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Transcription</h2>
          <div className="bg-gray-50 rounded-xl p-4 max-h-64 overflow-y-auto">
            {transcription && !transcription.includes("doesn't have captions") && !transcription.includes("automatic extraction is currently limited") ? (
              <div>
                <p className="text-gray-800 whitespace-pre-wrap leading-relaxed">{transcription}</p>
                <div className="mt-4 pt-4 border-t border-gray-200">
                  <p className="text-sm text-gray-600">
                    <strong>Length:</strong> {transcription.split(' ').length} words
                  </p>
                  <p className="text-sm text-gray-600">
                    <strong>Characters:</strong> {transcription.length}
                  </p>
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <p className="text-gray-500 italic mb-2">No transcription available...</p>
                <p className="text-sm text-gray-400 mb-4">Please go back and try with a different YouTube video that has captions enabled.</p>
                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                  <p className="text-yellow-800 text-sm">
                    <strong>Note:</strong> YouTube transcription is currently limited. For best results, please use the audio recording option instead.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Options de g√©n√©ration */}
        <div className="bg-white rounded-2xl shadow p-6">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">Generate Smart Notes</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
            {[
              { id: 'smart_notes', label: 'Smart Notes', icon: 'üìù', description: 'Organized study notes' },
              { id: 'summary', label: 'Summary', icon: 'üìã', description: 'Key points overview' },
              { id: 'detailed_transcript', label: 'Detailed Transcript', icon: 'üìÑ', description: 'Full formatted text' }
            ].map((option) => (
              <button
                key={option.id}
                onClick={() => setSelectedOutputType(option.id)}
                className={`p-6 rounded-2xl border-2 transition-all duration-200 transform hover:scale-105 ${
                  selectedOutputType === option.id
                    ? 'border-[#F7DC6F] bg-[#FEF9E7] shadow-lg'
                    : 'border-gray-200 hover:border-[#F7DC6F] hover:bg-gray-50'
                }`}
              >
                <div className="text-3xl mb-3">{option.icon}</div>
                <div className="text-sm font-bold text-gray-900 mb-1">{option.label}</div>
                <div className="text-xs text-gray-600">{option.description}</div>
              </button>
            ))}
          </div>
          
          <button
            onClick={generateNotes}
            disabled={isProcessing}
            className="w-full bg-[#F7DC6F] hover:translate-y-1 hover:shadow-sm active:translate-y-1 active:shadow-sm text-white font-bold rounded-xl px-6 py-4 text-lg shadow-lg border-2 border-[#F7DC6F] transition cursor-pointer disabled:opacity-50 disabled:cursor-not-allowed"
            style={{boxShadow: '0 4px 0 #E6C95A'}}
          >
            {isProcessing ? 'Generating...' : 'Smart Generation'}
          </button>
        </div>

        {/* Notes g√©n√©r√©es */}
        {generatedNotes && (
          <div className="bg-white rounded-2xl shadow p-6">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">Generated Notes</h2>
            <div className="bg-gray-50 rounded-xl p-4 max-h-96 overflow-y-auto">
              <div className="text-gray-800 whitespace-pre-wrap">{generatedNotes}</div>
            </div>
            <div className="mt-4 flex gap-4">
              <button
                onClick={() => navigator.clipboard.writeText(generatedNotes)}
                className="bg-[#F7DC6F] hover:translate-y-1 hover:shadow-sm active:translate-y-1 active:shadow-sm text-white font-bold rounded-xl px-6 py-3 shadow-lg border-2 border-[#F7DC6F] transition cursor-pointer"
                style={{boxShadow: '0 4px 0 #E6C95A'}}
              >
                Copy to Clipboard
              </button>
              <button
                onClick={() => {
                  const blob = new Blob([generatedNotes], { type: 'text/plain' });
                  const url = URL.createObjectURL(blob);
                  const a = document.createElement('a');
                  a.href = url;
                  a.download = 'smart-notes.txt';
                  a.click();
                  URL.revokeObjectURL(url);
                }}
                className="bg-[#F7DC6F] hover:translate-y-1 hover:shadow-sm active:translate-y-1 active:shadow-sm text-white font-bold rounded-xl px-6 py-3 shadow-lg border-2 border-[#F7DC6F] transition cursor-pointer"
                style={{boxShadow: '0 4px 0 #E6C95A'}}
              >
                Download TXT
              </button>
              <button
                onClick={downloadPDF}
                className="bg-[#F7DC6F] hover:translate-y-1 hover:shadow-sm active:translate-y-1 active:shadow-sm text-white font-bold rounded-xl px-6 py-3 shadow-lg border-2 border-[#F7DC6F] transition cursor-pointer"
                style={{boxShadow: '0 4px 0 #E6C95A'}}
              >
                Download PDF
              </button>
            </div>
          </div>
        )}

        {error && (
          <div className="bg-red-50 border border-red-200 rounded-xl p-4">
            <p className="text-red-800">{error}</p>
          </div>
        )}
      </div>
    </div>
  );
} 